{"version":3,"sources":["components/navbar.component.js","components/single-cause.component.js","components/causes-list.component.js","App.js","serviceWorker.js","index.js"],"names":["Component","SingleCause","props","onSubmit","bind","openModal","closeModal","onChangeStreet","onChangeCity","onChangeState","findRepresentatives","state","name","mailToSubject","mailToBody","aboutTheCause","timesSupported","isModalOpen","street","city","mailToLink","submitClass","e","this","setState","target","value","fEnable","console","log","Http","XMLHttpRequest","address","requestURL","BASE_CIVIC_URL","encodeURIComponent","repEmails","open","send","onreadystatechange","readyState","DONE","status","officials","JSON","parse","responseText","forEach","official","push","emails","mailTo","i","length","toggleSubmit","alert","axios","get","causeId","then","response","data","preventDefault","className","onClick","Modal","show","Header","Body","htmlFor","type","id","onChange","placeholder","Footer","href","role","CausesList","causeIds","map","cause","_id","causesList","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c113cef.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default class Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n                <Link to=\"/\" className=\"navbar-brand\">Be Heard</Link>\n                <div className=\"collapse navbar-collapse\"/>\n            </nav>\n        );\n    }\n}","import React, {Component} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from 'axios';\nconst API_KEY = \"AIzaSyAd9ET0aNrBcM1WbHmWOr7ZhQ0sYOPUtwk\"; //TODO: update so that key is fecthed from mongodb\nconst BASE_CIVIC_URL = \"https://www.googleapis.com/civicinfo/v2/representatives?includeOffices=true&levels=administrativeArea1&roles=legislatorLowerBody&roles=legislatorUpperBody\";\nconst submitButtonClass = 'btn btn-success btn-lg btn-block';\nconst invisibleClass = \"invisible\";\n\nexport default class SingleCause extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.onChangeStreet = this.onChangeStreet.bind(this);\n        this.onChangeCity = this.onChangeCity.bind(this);\n        this.onChangeState = this.onChangeState.bind(this);\n        this.findRepresentatives = this.findRepresentatives.bind(this);\n        this.state = {\n            name: '',\n            mailToSubject: '',\n            mailToBody: '',\n            aboutTheCause: '',\n            timesSupported: 0,\n            isModalOpen: false,\n            street: '',\n            city: '',\n            state: 'AL', //set to match first option in form\n            mailToLink: '',\n            submitClass: invisibleClass\n        }\n    }\n\n    //#region OnChanged\n    onChangeStreet(e) {\n        this.setState({\n            street: e.target.value\n        });\n    }\n\n    onChangeCity(e) {\n        this.setState({\n            city: e.target.value\n        });\n    }\n\n    onChangeState(e) {\n        this.setState({\n            state: e.target.value\n        });\n    }\n    //#endregion\n\n    toggleSubmit(fEnable) {\n        if (fEnable) {\n            this.setState({\n                submitClass: submitButtonClass,\n            });\n        } else {\n            this.setState({\n                submitClass: invisibleClass,\n            });\n        }\n    }\n\n    findRepresentatives() {\n        //TODO: replace Http with axios\n        console.log(\"finding reps\");\n        const Http = new XMLHttpRequest();\n        var address = this.state.street + \" \" + this.state.city + \" \" + this.state.state;\n        var requestURL = BASE_CIVIC_URL + \"&address=\" + encodeURIComponent(address) + \"&key=\" + API_KEY;\n        var repEmails = [];\n        Http.open(\"GET\", requestURL);\n        Http.send();\n        Http.onreadystatechange = (e) => {\n            if (Http.readyState === XMLHttpRequest.DONE && Http.status === 200) {\n                var officials = JSON.parse(Http.responseText).officials;\n                if (officials) {\n\n                    officials.forEach(function(official) {\n                        repEmails.push(official.emails[0]); //there COULD be more than 1 email (or none), update for this in the future\n                    });\n\n                    if (repEmails) {\n                        var mailTo = \"mailto:\"\n                        for(var i = 0; i < repEmails.length; i++) {\n                            mailTo = mailTo + repEmails[i];\n                            if (i < repEmails.length) {\n                                mailTo = mailTo + \";\";\n                            }\n                        }\n                        mailTo = mailTo + \"?subject=\" + encodeURIComponent(this.state.mailToSubject);\n                        mailTo = mailTo + \"&body=\" + encodeURIComponent(this.state.mailToBody);\n                        this.setState({\n                            mailToLink: mailTo\n                        });\n                        this.toggleSubmit(true);\n                    }\n\n                } else {\n                    //TODO: display a BETTER error using bootstrap/toast\n                    this.toggleSubmit(false);\n                    alert(\"No representatives found at that address.\")\n                }\n            } else if (Http.status === 400) {\n                //TODO: Display a better error\n                this.toggleSubmit(false);\n                alert(\"Could not get representatives for the address.\")\n            }\n        }\n    }\n\n    componentDidMount() {\n        axios.get(('http://localhost:5000/causes/' + this.props.causeId))\n        .then(response => {\n            if (response.data) {\n                this.setState({\n                    name: response.data.name,\n                    mailToSubject: response.data.mailToSubject,\n                    mailToBody: response.data.mailToBody,\n                    aboutTheCause: response.data.aboutTheCause,\n                    timesSupported: response.data.timesSupported        \n                });\n            } else {\n                this.setState({\n                    name: \"This cause was not found\",\n                });\n                console.log(\"Requested item not found...\");\n            }\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        \n    }\n\n    //#region Modal Management\n    openModal() {\n        this.setState({\n            isModalOpen: true\n        });\n    }\n\n    closeModal() {\n        this.setState({\n            isModalOpen: false\n        });\n    }\n    //#endregion\n\n    //#region Render\n    render() {\n        return (\n            <div>\n                <h3>{this.state.name}</h3>\n                <p>{this.state.aboutTheCause}</p>\n                <div>\n                    <button className=\"btn btn-primary\" onClick = {this.openModal}>Support This Cause</button>\n                    <Modal show={this.state.isModalOpen}>\n                        <Modal.Header>Tell Your Representatives You Support {this.state.name}</Modal.Header>\n                        <Modal.Body>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"street_id\" className=\"control-label\">Street Address</label>\n                                    <input \n                                        type=\"text\" \n                                        value={this.state.street} \n                                        className=\"form-control\" \n                                        id=\"street_id\" \n                                        name=\"street\" \n                                        onChange={this.onChangeStreet}\n                                        placeholder=\"123 Main Street\"/>\n                                </div>\t\t\t\t\t\n                            \n                                <div className=\"form-group\"> \n                                    <label htmlFor=\"city_id\" className=\"control-label\">City</label>\n                                    <input \n                                        type=\"text\" \n                                        value={this.state.city} \n                                        className=\"form-control\" \n                                        id=\"city_id\" \n                                        name=\"city\" \n                                        onChange={this.onChangeCity}\n                                        placeholder=\"Smallville\"/>\n                                </div>\t\t\t\t\t\t\t\t\t\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"state_id\" className=\"control-label\">State</label>\n                                    <select \n                                    value={this.state.state} \n                                    className=\"form-control\"\n                                    onChange={this.onChangeState}\n                                    id=\"state_id\">\n                                        <option value=\"AL\">Alabama</option>\n                                        <option value=\"AK\">Alaska</option>\n                                        <option value=\"AZ\">Arizona</option>\n                                        <option value=\"AR\">Arkansas</option>\n                                        <option value=\"CA\">California</option>\n                                        <option value=\"CO\">Colorado</option>\n                                        <option value=\"CT\">Connecticut</option>\n                                        <option value=\"DE\">Delaware</option>\n                                        <option value=\"DC\">District Of Columbia</option>\n                                        <option value=\"FL\">Florida</option>\n                                        <option value=\"GA\">Georgia</option>\n                                        <option value=\"HI\">Hawaii</option>\n                                        <option value=\"ID\">Idaho</option>\n                                        <option value=\"IL\">Illinois</option>\n                                        <option value=\"IN\">Indiana</option>\n                                        <option value=\"IA\">Iowa</option>\n                                        <option value=\"KS\">Kansas</option>\n                                        <option value=\"KY\">Kentucky</option>\n                                        <option value=\"LA\">Louisiana</option>\n                                        <option value=\"ME\">Maine</option>\n                                        <option value=\"MD\">Maryland</option>\n                                        <option value=\"MA\">Massachusetts</option>\n                                        <option value=\"MI\">Michigan</option>\n                                        <option value=\"MN\">Minnesota</option>\n                                        <option value=\"MS\">Mississippi</option>\n                                        <option value=\"MO\">Missouri</option>\n                                        <option value=\"MT\">Montana</option>\n                                        <option value=\"NE\">Nebraska</option>\n                                        <option value=\"NV\">Nevada</option>\n                                        <option value=\"NH\">New Hampshire</option>\n                                        <option value=\"NJ\">New Jersey</option>\n                                        <option value=\"NM\">New Mexico</option>\n                                        <option value=\"NY\">New York</option>\n                                        <option value=\"NC\">North Carolina</option>\n                                        <option value=\"ND\">North Dakota</option>\n                                        <option value=\"OH\">Ohio</option>\n                                        <option value=\"OK\">Oklahoma</option>\n                                        <option value=\"OR\">Oregon</option>\n                                        <option value=\"PA\">Pennsylvania</option>\n                                        <option value=\"RI\">Rhode Island</option>\n                                        <option value=\"SC\">South Carolina</option>\n                                        <option value=\"SD\">South Dakota</option>\n                                        <option value=\"TN\">Tennessee</option>\n                                        <option value=\"TX\">Texas</option>\n                                        <option value=\"UT\">Utah</option>\n                                        <option value=\"VT\">Vermont</option>\n                                        <option value=\"VA\">Virginia</option>\n                                        <option value=\"WA\">Washington</option>\n                                        <option value=\"WV\">West Virginia</option>\n                                        <option value=\"WI\">Wisconsin</option>\n                                        <option value=\"WY\">Wyoming</option>\n                                    </select>\t\t\t\t\t\n                                </div>    \n                            </form>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <a href={this.state.mailToLink} className={this.state.submitClass} role=\"button\">Be Heard</a>\n                            <button type=\"button\" className=\"btn btn-primary btn-lg btn-block\" onClick={this.findRepresentatives}>\n                                Find My Representatives\n                            </button>\n                            <button className=\"btn btn-secondary btn-sm btn-block\" onClick={this.closeModal}>Cancel</button>\n                        </Modal.Footer>\n                    </Modal>\n                </div>\n          </div>\n        );\n    }\n}\n\n//#endregion","import React, {Component} from 'react';\nimport axios from 'axios';\nimport SingleCause from './single-cause.component'\n\nexport default class CausesList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            causeIds: []\n        }\n    }\n\n    componentDidMount() {\n        axios.get(\"http://localhost:5000/causes\")\n        .then(response=> {\n            console.log(response);\n            if (response.data.length > 0) {\n                this.setState({\n                    causeIds: response.data.map(cause => cause._id)\n                });\n            }\n        });\n    }\n\n    causesList() {\n        return this.state.causeIds.map(id =>{\n            return (\n                <li className=\"list-group-item\">\n                    <SingleCause causeId={id} />\n                </li>);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Fight for Change</h1>\n                <ul className=\"list-group\">\n                    {this.causesList()}\n                </ul>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport 'bootswatch/dist/lux/bootstrap.min.css';import Navbar from \"./components/navbar.component\";\nimport CausesList from \"./components/causes-list.component\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        {/*<Navbar />*/}\n        <br/>\n        <Route path=\"/\" exact component={CausesList}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}